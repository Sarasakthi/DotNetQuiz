@page "/quiz"
@inject IQuizService QuizService

<h3>Quiz</h3>

@if (isLoading)
{
    <p>Loading questions...</p>
}
else if (!isQuizStarted)
{
    <label for="questionCount">
        Select number of questions:
        <select id="questionCount" class="form-select" @bind="selectedCount">
            @foreach (var count in questionCounts)
            {
                <option value="@count">@count</option>
            }
        </select>
    </label>
    <button class="btn btn-primary mt-2" @onclick="StartQuiz">Start Quiz</button>
}
else if (currentQuestionIndex < questions?.Count)
{
    <h4>Score: @correctCount / @questions.Count</h4>

    <h5>@currentQuestion.Question</h5>

    <ul>
        @foreach (var option in currentQuestion.Options)
        {
            <li>
                <input type="radio" 
                    name="answer" @onclick="() => SelectOption(option.OptionText, option.OptionIndex)" 
                    checked="@(selectedOptionIndex == option.OptionIndex)" />
                @option.OptionText
            </li>
        }
    </ul>

    <button class="btn btn-success mt-2" @onclick="() => NextQuestion(selectedOptionIndex)" 
        disabled="@string.IsNullOrEmpty(selectedOption)">Next</button>
}
else
{
    <h4>Quiz Completed!</h4>
    <h5>Your Score: @correctCount / @questions?.Count</h5>
    <button class="btn btn-secondary" @onclick="RestartQuiz">Restart Quiz</button>
}

@code {
    private List<QuizQuestionsModel>? questions;
    private int currentQuestionIndex = 0;
    private string? selectedOption;
    private bool isLoading = true;
    private bool showResult = false;
    private int correctCount = 0;

    private List<int> questionCounts = new() { 5, 10, 15, 20 };
    private int selectedCount = 5;

    private bool isQuizStarted = false;

    private QuizQuestionsModel currentQuestion => questions.ElementAtOrDefault(currentQuestionIndex);

    protected override void OnInitialized()
    {
        isLoading = false;
    }

    private async Task StartQuiz()
    {
        Console.WriteLine("StartQuiz method called");
        try
        {
            isQuizStarted = true;
            isLoading = true;
            StateHasChanged();

            questions = await QuizService.GetQuestionsRandomByNumber‌OfQuestions(selectedCount);
            currentQuestionIndex = 0;
            correctCount = 0;
            selectedOption = null;
            showResult = false;
            isLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in StartQuiz: {ex.Message}");
            isLoading = false;
            StateHasChanged();
        }
    }

    private int selectedOptionIndex = -1;
    private void SelectOption(string optionText, int index)
    {
        selectedOption = optionText;
        selectedOptionIndex = index;
    }

    private void NextQuestion(int selectedOptionIndex)
    {
        int correctResponseIndex = Int32.Parse(questions![currentQuestionIndex].CorrectResponse) - 1;
        if (selectedOptionIndex == correctResponseIndex)
        {
            correctCount++;
        }
        selectedOption = null;
        this.selectedOptionIndex = -1;
        currentQuestionIndex++;


        if (currentQuestionIndex >= questions!.Count)
        {
            showResult = true;
            isQuizStarted = false;
        }
    }

    private void RestartQuiz()
    {
        isQuizStarted = false;
        questions?.Clear();
        currentQuestionIndex = 0;
        correctCount = 0;
        selectedOption = null;
    }
}
