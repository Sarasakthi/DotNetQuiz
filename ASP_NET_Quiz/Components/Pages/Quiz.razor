@page "/quiz"
@rendermode InteractiveServer
@inject IQuizService QuizService

<div class="container mt-5">
    <div class="card shadow p-4">
        <h3 class="text-center mb-4">
            <i class="bi bi-question-circle-fill me-2"></i> Quiz Application
        </h3>

        @if (isLoading)
        {
            <div class="text-center my-5">
                <div class="spinner-border text-primary" role="status"></div>
                <p class="mt-3">Loading questions...</p>
            </div>
        }
        else if (!isQuizStarted && !showResult)
        {
            <div class="text-center">
                <h5>Welcome to the Quiz!</h5>

                <div class="form-group mt-4">
                    <label>Select number of questions</label>
                    <select class="form-select w-25 mx-auto" @bind="selectedCount">
                        @foreach (var count in questionCounts)
                        {
                            <option value="@count">@count Questions</option>
                        }
                    </select>
                </div>

                <button class="btn btn-primary btn-lg mt-3 w-40" @onclick="StartQuiz">
                    <i class="bi bi-play-fill me-1"></i> Start Quiz
                </button>
            </div>
        }
        else if (currentQuestionIndex < questions?.Count)
        {
            <div>
                <!-- Score and Progress -->
                <div class="d-flex justify-content-between mb-2">
                    <strong><i class="bi bi-star-fill me-1"></i> Score: @correctCount / @questions?.Count</strong>
                    <span>Question @(currentQuestionIndex + 1) of @questions?.Count</span>
                </div>

                <div class="progress" role="progressbar" aria-label="Animated striped example" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100">
                    <div class="progress-bar progress-bar-striped progress-bar-animated" 
                    style="width: @((double)(currentQuestionIndex + 1) / questions?.Count * 100)%">
                        @((int)((double)(currentQuestionIndex + 1) / questions?.Count * 100))%
                    </div>
                </div>

                <div class="card p-3 mb-3">
                    <h5>@currentQuestion?.Question</h5>
                </div>

                <div>
                    @if (currentQuestion?.Options != null)
                    {
                        @foreach (var option in currentQuestion.Options)
                        {
                            <div class="form-check mb-3">
                                <label class="form-check-label border rounded p-3 w-100 d-flex align-items-center"
                                for="@option.OptionIndex"
                                style="@GetOptionStyle(option.OptionIndex)">
                                    <input class="form-check-input me-2"
                                    type="radio"
                                    name="quizOption"
                                    value="@option.OptionIndex"
                                    id="@option.OptionIndex"
                                           disabled="@(selectedOptionIndex != -1)"
                                    checked="@(selectedOptionIndex == option.OptionIndex)"
                                    @onchange="@(() => selectedOptionIndex = option.OptionIndex)"
                                           @onclick="() => DisplayAnswer(option.OptionIndex)" />
                                    @option.OptionText
                                </label>
                            </div>
                        }
                    }
                </div>

                <div class="text-muted small mt-1">
                    @if (selectedOptionIndex == -1)
                    {
                        <div class="alert alert-secondary">
                            <strong>Select an option to see the answer</strong>
                        </div>
                    }
                    else {
                        <div class="alert @(selectedOptionIndex == -1 ? "alert-secondary" : (selectedOptionIndex == Int32.Parse(currentQuestion.CorrectResponse) - 1 ? "alert-success" : "alert-danger"))">
                            <p><strong>@answerResponse</strong></p>

                            @if (answerResponse != "Correct Answer")
                            {
                                <p class="mb-0">Correct Answer: @currentQuestion.Options[Int32.Parse(currentQuestion.CorrectResponse) - 1].OptionText</p>
                            }
                            <br />
                            <p>
                                <strong>Explanation:</strong>
                                @answerExplanation</p>
                        </div>
                    }
                </div>

                <button class="btn btn-success btn-lg w-100 mt-4"
                disabled="@(selectedOptionIndex == -1)"
                @onclick="() => NextQuestion(selectedOptionIndex)">
                    @(currentQuestionIndex == questions.Count - 1 ? "Finish Quiz" : "Next Question")
                </button>
            </div>
        }
        else
        {
            <!-- Results Section -->
            <div class="text-center mt-4">
                <i class="@GetResultIcon() fs-1 text-@GetResultColor()"></i>
                <h4 class="mt-3">Quiz Completed!</h4>

                <div class="card p-4 mt-3" style="background: linear-gradient(45deg, #2196f3, #21cbf3); color: white;">
                    <h5>Your Final Score</h5>
                    <h2 class="fw-bold">@correctCount / @(questions?.Count ?? 0)</h2>
                    <p>@GetPercentageScore()% Correct</p>
                </div>

                <p class="mt-3">@GetResultMessage()</p>

                <button class="btn btn-secondary btn-lg mt-2" @onclick="RestartQuiz">
                    <i class="bi bi-arrow-clockwise me-1"></i> Take Quiz Again
                </button>
            </div>
        }
    </div>
</div>

@code {
    private List<QuizQuestionsModel>? questions;
    private int currentQuestionIndex = 0;
    private string? selectedOption;
    private bool isLoading = true;
    private bool showResult = false;
    private int correctCount = 0;
    private List<int> questionCounts = new() { 5, 10, 15, 20 };
    private int selectedCount = 5;
    private bool isQuizStarted = false;
    private int selectedOptionIndex = -1;
    private QuizQuestionsModel? currentQuestion => questions?.ElementAtOrDefault(currentQuestionIndex);

    protected override void OnInitialized()
    {
        isLoading = false;
    }

    private async Task StartQuiz()
    {
        try
        {
            isQuizStarted = true;
            isLoading = true;
            StateHasChanged();

            questions = await QuizService.GetQuestionsRandomByNumberOfQuestions(selectedCount);
            currentQuestionIndex = 0;
            correctCount = 0;
            selectedOption = null;
            selectedOptionIndex = -1;
            showResult = false;
            isLoading = false;
            StateHasChanged();
        }
        catch
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string answerResponse = "Correct Answer";
    private string answerExplanation = "";

    private void DisplayAnswer(int selectedOptionIndex)
    {
        bool answerCorrect = false;

        if (questions == null || currentQuestion == null) return;

        int correctResponseIndex = Int32.Parse(questions[currentQuestionIndex].CorrectResponse) - 1;
        if (selectedOptionIndex == correctResponseIndex)
        {
            answerCorrect = true;
        }
        answerResponse = answerCorrect ? answerResponse : "Incorrect Answer";
        answerExplanation = questions[currentQuestionIndex].Explanation ?? "Oops! No explanation availalble for this question.";
    }

    private void NextQuestion(int selectedOptionIndex)
    {
        if (questions == null || currentQuestion == null) return;

        int correctResponseIndex = Int32.Parse(questions[currentQuestionIndex].CorrectResponse) - 1;
        if (selectedOptionIndex == correctResponseIndex)
        {
            correctCount++;
        }

        this.selectedOptionIndex = -1;
        currentQuestionIndex++;

        if (currentQuestionIndex >= questions.Count)
        {
            showResult = true;
            isQuizStarted = false;
        }

        StateHasChanged();
    }

    private void RestartQuiz()
    {
        showResult = false;
        isQuizStarted = false;
        questions?.Clear();
        currentQuestionIndex = 0;
        correctCount = 0;
        selectedOption = null;
        selectedOptionIndex = -1;
        selectedCount = 5;

        StateHasChanged();
    }

    private string GetOptionStyle(int optionIndex)
    {
        if (selectedOptionIndex == optionIndex)
        {
            return "background-color: #e6f7ff; border: 2px solid #007bff;";
        }
        return "border: 1px solid #ced4da;";
    }

    private string GetResultIcon()
    {
        var percentage = GetPercentageScore();
        return percentage >= 80 ? "bi bi-trophy-fill" :
               percentage >= 60 ? "bi bi-hand-thumbs-up-fill" :
               "bi bi-emoji-neutral-fill";
    }

    private string GetResultColor()
    {
        var percentage = GetPercentageScore();
        return percentage >= 80 ? "success" :
               percentage >= 60 ? "info" :
               "warning";
    }

    private int GetPercentageScore()
    {
        if (questions == null || questions.Count == 0) return 0;
        return (int)Math.Round((double)correctCount / questions.Count * 100);
    }

    private string GetResultMessage()
    {
        var percentage = GetPercentageScore();
        return percentage >= 90 ? "Excellent! You're a quiz master! 🏆" :
               percentage >= 80 ? "Great job! Well done! 👏" :
               percentage >= 70 ? "Good work! Keep it up! 👍" :
               percentage >= 60 ? "Not bad! Room for improvement! 📚" :
               "Keep practicing! You'll get better! 💪";
    }
}
